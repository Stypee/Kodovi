Program:
1   #include "mbed.h"
2   #include "LCD.h"
3   #include "MFRC522.h"
4   #include "DS1820.h"
5   
6   #define trajanje 20
7   
8   MFRC522  RfChip(PC_12, PC_11, PC_10, PD_2, PG_2);//rfid
9   LCD lcd(PF_0,PF_1);//i2c lcd
10  DS1820 probe(D0);//temperaturni senzor
11  DigitalOut led(D7);//temperatura je ok
12  DigitalOut led1(D6);//rfid
13  DigitalOut led2(D5);//ako je pritisnuta tipka za pocetak
14  DigitalOut led3(D4);//pranje
15  DigitalOut led4(D3);//vosak
16  DigitalOut led5(D2);//ispiranje
17  DigitalOut led6(D1);//kraj
18  InterruptIn tipka(PG_0);//tipka za pocetak
19  InterruptIn pranje(A3);//tipka za pranje
20  InterruptIn vosak(A4);//tipka za vosak
21  InterruptIn ispiranje(A5);//topka za ispiranje
22  DigitalOut relejpranje(A0);//relej za pranje
23  DigitalOut relejvosak(A1);//relej za vosak
24  DigitalOut relejispiranje(A2);//relej za ispiranje
25  DigitalOut relejsvijetlo(D15);//relej za svjetlo
26  Timer brojanje;//vrijeme trajanja pranja
27  Timer debounce;
28  
29  void programpranje(){
30      if(led2==1 && debounce.read_ms()>150){
31          led3=1;
32          led4=0;
33          led5=0;
34          relejpranje=1;
35          relejvosak=0;
36          relejispiranje=0;
37          debounce.reset();
38      }
39      }
40  void programvosak(){
41      if(led2==1 && debounce.read_ms()>150){
42          led3=0;
43          led4=1;
44          led5=0;
45          relejpranje=0;
46          relejvosak=1;
47          relejispiranje=0;
48          debounce.reset();
49      }
50      }
51  void programispiranje(){
52      if(led2==1 && debounce.read_ms()>150){
53          led3=0;
54          led4=0;
55          led5=1;
56          relejpranje=0;
57          relejvosak=0;
58          relejispiranje=1;
59          debounce.reset();
60      }
61      }
62  void pokretanje(){
63      if(led6==0 && led1==1 && debounce.read_ms()>150){
64      led2=1;
65      pranje.rise(&programpranje);
66      vosak.rise(&programvosak);
67      ispiranje.rise(&programispiranje);
68      debounce.reset();
69      }
70      }
71  
72          
73  int main(){
74      tipka.mode(PullDown);
75      pranje.mode(PullDown);
76      vosak.mode(PullDown);
77      ispiranje.mode(PullDown);
78      
79      int ispis=0;
80      int vrijeme=0;
81      relejpranje=0;
82      relejvosak=0;
83      relejispiranje=0;
84      relejsvijetlo=0;
85      led=0;
86      led1=1;//
87      led2=0;
88      led3=0;
89      led4=0;
90      led5=0;
91      led6==0;
92      RfChip.PCD_Init();
93      debounce.start();
94      tipka.rise(&pokretanje);
95      while(1){
96          probe.convertTemperature(true, DS1820::all_devices);    
97          if(probe.temperature()>=25 && led1==0){ 
98              led=1;
99              lcd.brisi();
100             lcd.lokacija(0,0);
101             lcd.printf("Temperatura:%3.3fC", probe.temperature());
102             lcd.lokacija(0,1);
103             lcd.printf("Prislonite magnet");
104             for(int i=0; i<=10;i++){
105                 if(!RfChip.PICC_IsNewCardPresent()){
106                     continue;
107                 }
108                 if(!RfChip.PICC_ReadCardSerial()){
109                     led1=1;
110                     relejsvijetlo=1;
111                     continue; 
112                 }
113                 wait(0.1);
114             }
115         }else if(probe.temperature()<25 && led1==0){
116              led=0;
117              lcd.brisi();
118              lcd.lokacija(0,0);
119              lcd.printf("Temperatura: %3.3fC",probe.temperature());
120              lcd.lokacija(0,1);
121              lcd.printf("Temperatura je \npreniska");
122              lcd.lokacija(0,3);
123              lcd.printf("Pokusaj kasnije");
124             }
125         if(led1==1 && led2==0 && ispis==0){
126             lcd.brisi();
127             lcd.printf("    Dobrodosli u \n    samoposluznu \n     autopraonu");
128             wait(5);
129             ispis=1;
130         }
131         if(ispis==1 && led2==0){
132             lcd.brisi();
133             lcd.printf("Pritisni tipku za \npokretanje");
134             }
135         if(led2==1){
136             lcd.brisi();
137             lcd.lokacija(0,0);
138             lcd.printf("Izaberi program: ");
139             lcd.lokacija(0,1);
140             lcd.printf("1.pranje ");
141             lcd.lokacija(0,2);
142             lcd.printf("2.vosak ");
143             lcd.lokacija(0,3);
144             lcd.printf("3.ispiranje ");
145         }
146         if(relejpranje==1 || relejvosak==1 || relejispiranje==1){
147             brojanje.start();
148         }
149         vrijeme=trajanje-brojanje.read();
150         if(relejpranje==1){
151             lcd.brisi();
152             lcd.lokacija(0,0);
153             lcd.printf("Izabran program:");
154             lcd.lokacija(0,1);
155             lcd.printf("***Pranje***");
156             lcd.lokacija(0,2);
157             lcd.printf("Preostalo vrijeme:");
158             lcd.lokacija(0,3);
159             lcd.printf("%d sekundi", vrijeme);
160         }
161         if(relejvosak==1){
162             lcd.brisi();
163             lcd.lokacija(0,0);
164             lcd.printf("Izabran program:");
165             lcd.lokacija(0,1);
166             lcd.printf("***Vosak***");
167             lcd.lokacija(0,2);
168             lcd.printf("Preostalo vrijeme:");
169             lcd.lokacija(0,3);
170             lcd.printf("%d sekundi", vrijeme); 
171         }
172         if(relejispiranje==1){
173             lcd.brisi();
174             lcd.lokacija(0,0);
175             lcd.printf("Izabran program:");
176             lcd.lokacija(0,1);
177             lcd.printf("***Ispiranje***");
178             lcd.lokacija(0,2);
179             lcd.printf("Preostalo vrijeme:");
180             lcd.lokacija(0,3);
181             lcd.printf("%d sekundi", vrijeme); 
182         }
183         if(vrijeme==0){
184             brojanje.stop();
185             brojanje.reset();
186             ispis=0;
187             led=0;
188             led1=0;
189             led2=0;
190             led3=0;
191             led4=0;
192             led5=0;
193             led6=1;
194             relejpranje=0;
195             relejvosak=0;
196             relejispiranje=0;
197             relejsvijetlo=0;
198             lcd.brisi();
199             lcd.lokacija(0,0);
200             lcd.printf("Vrijeme je isteklo");
201             wait(5);
202             led6=0;
203         }
204     }
205 }












Libary
LCD.h

1  #include "mbed.h"
2  
3  #ifndef DISPLAY
4  #define DISPLAY
5  
6  #define E_ON 0x04
7  #define RS_ON 0x01
8  #define RW_ON 0x02
9  #define BL_ON 0x08
10 
11 
12 class LCD : public Stream {
13 public:
14     LCD(PinName sda,PinName scl, int i2cAddress = 0x27<<1);
15     void lokacija(int stupac, int red);
16     void brisi();
17 protected:
18     virtual int _putc(int vrijednost);
19     virtual int _getc();
20     int adresa(int stupac, int red);
21     void znak(int stupac, int red, int c);
22     void vrijednost(int vrijdnost, bool rs);
23     void naredba(int naredba);
24     void podatak(int podatak);
25     void zapisi(int vrijednost, bool rs);
26     void I2Cvrijednost(int podatak); 
27 
28     int _rs;
29     I2C _i2c;
30     int _i2cAddress;
31 
32     int _stupac;
33     int _red;
34 };
35 #endif








LCD.cpp
1   #include "mikroupravljač.h"
2   #include "LCD.h"
3   LCD::LCD(PinName sda, PinName scl, int i2cAddress) : _i2c(sda, scl),   _i2cAddress(i2cAddress) {
4       vrijednost(E_ON,false);
5       wait(0.015);       
6       for (int i=0; i<3; i++) {
7           vrijednost(0x3, 0);
8           wait(0.00164);
9       }
10      vrijednost(0x2, 0);    
11      wait(0.000040f);    
12  
13      naredba(0x28); 
14      naredba(0x0C);
15      naredba(0x6);
16      brisi();
17  }
18  
19  void LCD::znak(int stupac, int red, int c) {
20      int a = adresa(stupac, red);
21      naredba(a);
22      podatak(c);
23  }
24  
25  void LCD::brisi() {
26      naredba(0x01); 
27      wait(0.00164f); 
28      lokacija(0, 0);
29  }
30  
31  void LCD::lokacija(int stupac, int red) {
32      _stupac = stupac;
33      _red = red;
34  }
35  
36  int LCD::_putc(int vrijednost) {
37      if (vrijednost == '\n') {
38          _stupac = 0;
39          _red++;
40          if (_red >= 4) {
41              _red = 0;
42          }
43      } else {
44          znak(_stupac, _red, vrijednost);
45          _stupac++;
46          if (_stupac >= 20) {
47              _stupac = 0;
48              _red++;
49              if (_red >= 4) {
50                  _red = 0;
51              }
52          }
53      }
54      return vrijednost;
55  }
56  
57  int LCD::_getc() {
58      return 0;//to ne znam
59  }
60  
61  void LCD::I2Cvrijednost(int podatak) {
62      char cmd[1];
63      cmd[0] = podatak;
64      _i2c.write(_i2cAddress, cmd, 1);
65  }
66  
67  void LCD::zapisi(int podatak, bool rs) {
68      podatak = podatak << 4;
69      podatak |= BL_ON; // E on
70      if (rs) {
71          podatak = podatak | RS_ON; // set rs bit
72      }
73      podatak |= E_ON; // E on
74      I2Cvrijednost(podatak);
75      podatak ^= E_ON; // E off
76     I2Cvrijednost(podatak);
77     
78  }
79  
80  void LCD::vrijednost(int podatak, bool rs) {
81      zapisi(podatak >> 4, rs);
82      zapisi(podatak & 0x0F, rs);
83  }
84  
85  void LCD::naredba(int naredba) {
86      vrijednost(naredba, 0);
87  }
88  
89  void LCD::podatak(int podatak) {
90      vrijednost(podatak, 1);
91  }
92  
93  int LCD::adresa(int stupac, int red) {
94      switch (red) {
95          case 0:
96              return 0x80 + stupac;
97          case 1:
98              return 0xc0 + stupac;
99          case 2:
100             return 0x94 + stupac;
101         case 3:
102             return 0xd4 + stupac;
103         default:
104             return 0x80 + stupac;
105     }
106 }


customMFRC522.h
#ifndef customMFRC522_h
#define customMFRC522_h
#include "mbed.h"
 
1    class customMFRC522 {
2     public:
3     enum PCD_Register {
4       // Page 0: Command and status
5       //                0x00        // rezervirano za buduće naredbe
6       CommandReg      = 0x01 << 1,  
7       ComIEnReg       = 0x02 << 1,  
8       DivIEnReg       = 0x03 << 1,  
9       ComIrqReg       = 0x04 << 1,  
10      DivIrqReg       = 0x05 << 1,  
11      ErrorReg        = 0x06 << 1,  
12      Status1Reg      = 0x07 << 1,  
13      Status2Reg      = 0x08 << 1,  
14      FIFODataReg     = 0x09 << 1,  
15      FIFOLevelReg    = 0x0A << 1,  
16      WaterLevelReg   = 0x0B << 1,  
17      ControlReg      = 0x0C << 1,  
18      BitFramingReg   = 0x0D << 1,  
19      CollReg         = 0x0E << 1,  
20      //                0x0F        // rezervirano za buduće naredbe
21   
22      // Page 1:Command             // rezervirano za buduće naredbe
23      //                0x10        
24      ModeReg         = 0x11 << 1,  
25      TxModeReg       = 0x12 << 1,  
26      RxModeReg       = 0x13 << 1,  
27      TxControlReg    = 0x14 << 1,  
28      TxASKReg        = 0x15 << 1,  
29      TxSelReg        = 0x16 << 1,  
30      RxSelReg        = 0x17 << 1,  
31      RxThresholdReg  = 0x18 << 1,  
32      DemodReg        = 0x19 << 1,  
33      //                0x1A        // rezervirano za buduće naredbe
34      //                0x1B        // rezervirano za buduće naredbe
35      MfTxReg         = 0x1C << 1,  
36      MfRxReg         = 0x1D << 1,  
37      //                0x1E        // rezervirano za buduće naredbe
38      SerialSpeedReg  = 0x1F << 1,  
39   
40      // Page 2: Configuration
41      //                0x20        // rezervirano za buduće naredbe
42      CRCResultRegH   = 0x21 << 1,  
43      CRCResultRegL   = 0x22 << 1,
44      //                0x23        // rezervirano za buduće naredbe
45      ModWidthReg     = 0x24 << 1,  
46      //                0x25        // rezervirano za buduće naredbe
47      RFCfgReg        = 0x26 << 1,  
48      GsNReg          = 0x27 << 1,  
49      CWGsPReg        = 0x28 << 1,  
50      ModGsPReg       = 0x29 << 1,  
51      TModeReg        = 0x2A << 1,  
52      TPrescalerReg   = 0x2B << 1, 
53      TReloadRegH     = 0x2C << 1,  
54      TReloadRegL     = 0x2D << 1,
55      TCntValueRegH   = 0x2E << 1,  
56      TCntValueRegL   = 0x2F << 1,
57   
58      // Page 3:Test Registers
59      //                0x30        // rezervirano za buduće naredbe
60      TestSel1Reg     = 0x31 << 1,  
61      TestSel2Reg     = 0x32 << 1,  
62      TestPinEnReg    = 0x33 << 1,  
63      TestPinValueReg = 0x34 << 1,  
64      TestBusReg      = 0x35 << 1,  
65      AutoTestReg     = 0x36 << 1, 
66      VersionReg      = 0x37 << 1,  
67      AnalogTestReg   = 0x38 << 1, 
68      TestDAC1Reg     = 0x39 << 1,  
69      TestDAC2Reg     = 0x3A << 1,  
70      TestADCReg      = 0x3B << 1   
71      //                0x3C        // rezervirano za potrebe proizvodnje
72      //                0x3D        // rezervirano za potrebe proizvodnje
73      //                0x3E        // rezervirano za potrebe proizvodnje
74      //                0x3F        // rezervirano za potrebe proizvodnje
75    };
76    
77    
78    // MFRC522 commands Described in chapter 10 of the datasheet.
79    enum PCD_Command {
80      PCD_Idle               = 0x00,   
81      PCD_Mem                = 0x01,   
82      PCD_GenerateRandomID   = 0x02,  
83      PCD_CalcCRC            = 0x03,   
84      PCD_Transmit           = 0x04,   
85      PCD_NoCmdChange        = 0x07,   
86      PCD_Receive            = 0x08,   
87      PCD_Transceive         = 0x0C,   
88      PCD_MFAuthent          = 0x0E,   
89      PCD_SoftReset          = 0x0F    
90    };
91   
92    // Commands sent to the PICC.
93    enum PICC_Command {
94      PICC_CMD_REQA          = 0x26,   
95      PICC_CMD_WUPA          = 0x52,   
96      PICC_CMD_CT            = 0x88,  
97      PICC_CMD_SEL_CL1       = 0x93,   
98      PICC_CMD_SEL_CL2       = 0x95,   
99      PICC_CMD_SEL_CL3       = 0x97,  
100     PICC_CMD_HLTA          = 0x50,   
101     PICC_CMD_MF_AUTH_KEY_A = 0x60,  
102     PICC_CMD_MF_AUTH_KEY_B = 0x61,   
103     PICC_CMD_MF_READ       = 0x30,   
104     PICC_CMD_MF_WRITE      = 0xA0,  
105     PICC_CMD_MF_DECREMENT  = 0xC0,   
106     PICC_CMD_MF_INCREMENT  = 0xC1,   
107     PICC_CMD_MF_RESTORE    = 0xC2,   
108     PICC_CMD_MF_TRANSFER   = 0xB0,   
109     PICC_CMD_UL_WRITE      = 0xA2    
110   };
111   enum MIFARE_Misc {
112     MF_ACK                 = 0xA,    
113     MF_KEY_SIZE            = 6      
114   };
115   enum PICC_Type {
116     PICC_TYPE_UNKNOWN      = 0,
117     PICC_TYPE_ISO_14443_4  = 1,  
118     PICC_TYPE_ISO_18092    = 2,  
119     PICC_TYPE_MIFARE_MINI  = 3,  
120     PICC_TYPE_MIFARE_1K    = 4,  
121     PICC_TYPE_MIFARE_4K    = 5,  
122     PICC_TYPE_MIFARE_UL    = 6,  
123     PICC_TYPE_MIFARE_PLUS  = 7,  
124     PICC_TYPE_TNP3XXX      = 8,  
125     PICC_TYPE_NOT_COMPLETE = 255 
126   };
127   enum StatusCode {
128     STATUS_OK              = 1,  
129     STATUS_ERROR           = 2, 
130     STATUS_COLLISION       = 3, 
131     STATUS_TIMEOUT         = 4,  
132     STATUS_NO_ROOM         = 5,  
133     STATUS_INTERNAL_ERROR  = 6,  
134     STATUS_INVALID         = 7,  
135     STATUS_CRC_WRONG       = 8,  
136     STATUS_MIFARE_NACK     = 9   
137   };
138   typedef struct {
139     uint8_t    size;     
140     uint8_t    uidByte[10];
141     uint8_t    sak;      
142   } Uid;
143   typedef struct {
144     uint8_t    keyByte[MF_KEY_SIZE];
145   } MIFARE_Key;
146   Uid uid;                
147   static const uint8_t FIFO_SIZE = 64;   
148   customMFRC522(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName reset);
149   ~customMFRC522();
150   void PCD_AntennaOn();
151   void PCD_Init();
152   uint8_t PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result);
153   void PCD_ReadRegister(uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign);
154   void PCD_SetRegisterBits(uint8_t reg, uint8_t mask);
155   void PCD_WriteRegister(uint8_t reg, uint8_t count, uint8_t *values);
156   uint8_t PCD_TransceiveData (uint8_t *sendData,
157                               uint8_t sendLen,
158                               uint8_t *backData,
159                               uint8_t *backLen,
160                               uint8_t *validBits = NULL,
161                               uint8_t rxAlign    = 0,
162                               bool    checkCRC   = false);                                 
163   uint8_t PCD_CommunicateWithPICC(uint8_t command,
164                                          uint8_t waitIRq,
165                                          uint8_t *sendData,
166                                          uint8_t sendLen,
167                                          uint8_t *backData,
168                                          uint8_t *backLen,
169                                          uint8_t *validBits,
170                                          uint8_t rxAlign,
171                                          bool    checkCRC);
172   void PCD_WriteRegister(uint8_t reg, uint8_t value);
173   uint8_t PCD_ReadRegister(uint8_t reg);
174   void PCD_ClrRegisterBits(uint8_t reg, uint8_t mask);
175   uint8_t PICC_REQA_or_WUPA  (uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize);
176   uint8_t PICC_RequestA      (uint8_t *bufferATQA, uint8_t *bufferSize);
177   uint8_t PICC_Select        (Uid *uid, uint8_t validBits = 0);
178   bool    PICC_IsNewCardPresent(void);
179   bool    PICC_ReadCardSerial  (void);
180   private:
181       SPI              m_SPI;
182       DigitalOut       m_CS;
183       DigitalOut       m_RESET;
184     uint8_t MIFARE_TwoStepHelper(uint8_t command, uint8_t blockAddr, uint32_t data);
185     };
186  
187# endif














customMFRC522.cpp
1   #include "customMFRC522.h"
2   #define MFRC522_MaxPICCs (sizeof(_TypeNamePICC)/sizeof(_TypeNamePICC[0]))
3   #define MFRC522_MaxError (sizeof(_ErrorMessage)/sizeof(_ErrorMessage[0]))
4   customMFRC522::customMFRC522(PinName mosi,
5                    PinName miso,
6                    PinName sclk,
7                    PinName cs,
8                    PinName reset) : m_SPI(mosi, miso, sclk), m_CS(cs), m_RESET(reset)
9   {
10    m_SPI.format(8, 0);
11    m_SPI.frequency(8000000);
12    m_CS       = 1;
13    m_RESET    = 1;
14  } // End constructor
15    //Destructor.
16   customMFRC522::~customMFRC522()
17  {
18  
19  }
20  
21  void customMFRC522::PCD_AntennaOn()
22  {
23    uint8_t value = PCD_ReadRegister(TxControlReg);
24    if ((value & 0x03) != 0x03)
25    {
26      PCD_WriteRegister(TxControlReg, value | 0x03);
27    }
28  } // End PCD_AntennaOn()
29  
30  void customMFRC522::PCD_Init()
31  {
32    /* Reset MFRC522 */
33    m_RESET = 0;
34    wait_ms(10);
35    m_RESET = 1;
36    wait_ms(50);
37  
38    PCD_WriteRegister(TModeReg, 0x80);      // TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
39    PCD_WriteRegister(TPrescalerReg, 0xA9); // TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25us.
40    PCD_WriteRegister(TReloadRegH, 0x03);   // Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
41    PCD_WriteRegister(TReloadRegL, 0xE8);
42  
43    PCD_WriteRegister(TxASKReg, 0x40);      // Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
44    PCD_WriteRegister(ModeReg, 0x3D);       // Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
45  
46    PCD_WriteRegister(RFCfgReg, (0x07<<4)); // Set Rx Gain to max
47  
48    PCD_AntennaOn();                        // Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
49  } // End PCD_Init()
50  
51  
52  
53  uint8_t customMFRC522::PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result)
54  {
55    PCD_WriteRegister(CommandReg, PCD_Idle);      // Stop any active command.
56    PCD_WriteRegister(DivIrqReg, 0x04);           // Clear the CRCIRq interrupt request bit
57    PCD_SetRegisterBits(FIFOLevelReg, 0x80);      // FlushBuffer = 1, FIFO initialization
58    PCD_WriteRegister(FIFODataReg, length, data); // Write data to the FIFO
59    PCD_WriteRegister(CommandReg, PCD_CalcCRC);   // Start the calculation
60    uint16_t i = 5000;
61    uint8_t n;
62    while (1)
63    {
64      n = PCD_ReadRegister(DivIrqReg);  
65      if (n & 0x04)
66      {
67        break;
68      }
69        if (--i == 0)
70      {
71        return STATUS_TIMEOUT;
72      }
73    }
74  
75    
76    PCD_WriteRegister(CommandReg, PCD_Idle);
77    result[0] = PCD_ReadRegister(CRCResultRegL);
78    result[1] = PCD_ReadRegister(CRCResultRegH);
79    return STATUS_OK;
80  } 
81  void customMFRC522::PCD_ReadRegister(uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign)
82  {
83    if (count == 0) { return; }
84    uint8_t address = 0x80 | reg;  
85    uint8_t index = 0;             
86    m_CS = 0;                      
87    count--;                       
88    (void) m_SPI.write(address);   
89     while (index < count)
90    {
91      if ((index == 0) && rxAlign) 
92      {
93        uint8_t mask = 0;
94        for (uint8_t i = rxAlign; i <= 7; i++)
95        {
96          mask |= (1 << i);
97        }
98        uint8_t value = m_SPI.write(address);
99        values[0] = (values[index] & ~mask) | (value & mask);
100     }
101     else
102     {
103       values[index] = m_SPI.write(address);
104     }
105     index++;
106   }
107   values[index] = m_SPI.write(0); 
108   m_CS = 1;                      
109 } // End PCD_ReadRegister()
110 void customMFRC522::PCD_WriteRegister(uint8_t reg, uint8_t count, uint8_t *values)
111 {
112   m_CS = 0; 
113   (void) m_SPI.write(reg & 0x7E);
114   for (uint8_t index = 0; index < count; index++)
115   {
116     (void) m_SPI.write(values[index]);
117   }
118   m_CS = 1; 
119 } // End PCD_WriteRegister()
120 void customMFRC522::PCD_SetRegisterBits(uint8_t reg, uint8_t mask)
121 {
122   uint8_t tmp = PCD_ReadRegister(reg);
123   PCD_WriteRegister(reg, tmp | mask);     
124 } // End PCD_SetRegisterBitMask()
125 uint8_t customMFRC522::PCD_TransceiveData(uint8_t *sendData,
126                                     uint8_t sendLen,
127                                     uint8_t *backData,
128                                     uint8_t *backLen,
129                                     uint8_t *validBits,
130                                     uint8_t rxAlign,
131                                     bool    checkCRC)
132 {
133   uint8_t waitIRq = 0x30;    
134   return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
135 } 
136 uint8_t customMFRC522::PCD_CommunicateWithPICC(uint8_t command,
137                                          uint8_t waitIRq,
138                                          uint8_t *sendData,
139                                          uint8_t sendLen,
140                                          uint8_t *backData,
141                                          uint8_t *backLen,
142                                          uint8_t *validBits,
143                                          uint8_t rxAlign,
144                                          bool    checkCRC)
145 {
146   uint8_t n, _validBits = 0;
147   uint32_t i;
148   uint8_t txLastBits = validBits ? *validBits : 0;
149   uint8_t bitFraming = (rxAlign << 4) + txLastBits;   
150   PCD_WriteRegister(CommandReg, PCD_Idle);            
151   PCD_WriteRegister(ComIrqReg, 0x7F);                 
152   PCD_SetRegisterBits(FIFOLevelReg, 0x80);            
153   PCD_WriteRegister(FIFODataReg, sendLen, sendData);  
154   PCD_WriteRegister(BitFramingReg, bitFraming);       
155   PCD_WriteRegister(CommandReg, command);             
156   if (command == PCD_Transceive)
157   {
158     PCD_SetRegisterBits(BitFramingReg, 0x80);      
159   }
160   i = 2000;
161   while (1)
162   {
163     n = PCD_ReadRegister(ComIrqReg);  
164       if (n & waitIRq)
165     {          
166       break;
167     }
168       if (n & 0x01)
169     {           
170       return STATUS_TIMEOUT;
171     }
172       if (--i == 0)
173     {           
174       return STATUS_TIMEOUT;
175     }
176   }
177   uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); 
178       if (errorRegValue & 0x13)
179   {  
180     return STATUS_ERROR;
181   }
182   if (backData && backLen)
183   {
184     n = PCD_ReadRegister(FIFOLevelReg);           
185     if (n > *backLen)
186     {
187       return STATUS_NO_ROOM;
188     }
189    *backLen = n;                       
190     PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);    
191     _validBits = PCD_ReadRegister(ControlReg) & 0x07; 
192     if (validBits)
193     {
194       *validBits = _validBits;
195     }
196   }
197   if (errorRegValue & 0x08)
198   { 
199     return STATUS_COLLISION;
200   }
201   if (backData && backLen && checkCRC)
202   {
203     if ((*backLen == 1) && (_validBits == 4))
204     {
205       return STATUS_MIFARE_NACK;
206     }
207     if ((*backLen < 2) || (_validBits != 0))
208     {
209       return STATUS_CRC_WRONG;
210     }
211     uint8_t controlBuffer[2];
212     n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
213     if (n != STATUS_OK)
214     {
215       return n;
216     }
217     if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1]))
218     {
219       return STATUS_CRC_WRONG;
220     }
221   }
222   return STATUS_OK;
223 } // End PCD_CommunicateWithPICC()
224 
225 void customMFRC522::PCD_WriteRegister(uint8_t reg, uint8_t value)
226 {
227   m_CS = 0; 
228   (void) m_SPI.write(reg & 0x7E);
229   (void) m_SPI.write(value);
230   m_CS = 1; 
231 } // End PCD_WriteRegister()
232 uint8_t customMFRC522::PCD_ReadRegister(uint8_t reg)
233 {
234   uint8_t value;
235   m_CS = 0; 
236   (void) m_SPI.write(0x80 | reg);
237   value = m_SPI.write(0);
238   m_CS = 1; 
239   return value;
240 } // End PCD_ReadRegister()
241 void customMFRC522::PCD_ClrRegisterBits(uint8_t reg, uint8_t mask)
242 {
243   uint8_t tmp = PCD_ReadRegister(reg);
244   PCD_WriteRegister(reg, tmp & (~mask));    
245 } // End PCD_ClearRegisterBitMask()
246 uint8_t customMFRC522::PICC_REQA_or_WUPA(uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize)
247 {
248   uint8_t validBits;
249   uint8_t status;
250   if (bufferATQA == NULL || *bufferSize < 2)
251   {  
252     return STATUS_NO_ROOM;
253   }
254   PCD_ClrRegisterBits(CollReg, 0x80);
255   validBits = 7;
256   status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
257   if (status != STATUS_OK)
258   {
259     return status;
260   }
261   if ((*bufferSize != 2) || (validBits != 0))
262   {   
263     return STATUS_ERROR;
264   }
265   return STATUS_OK;
266 } 
267 uint8_t customMFRC522::PICC_RequestA(uint8_t *bufferATQA, uint8_t *bufferSize)
268 {
269   return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
270 } // End PICC_RequestA()
271 uint8_t customMFRC522::PICC_Select(Uid *uid, uint8_t validBits)
272 {
273   bool uidComplete;
274   bool selectDone;
275   bool useCascadeTag;
276   uint8_t cascadeLevel = 1;
277   uint8_t result;
278   uint8_t count;
279   uint8_t index;
280   uint8_t uidIndex;          
281   uint8_t currentLevelKnownBits;   
282   uint8_t buffer[9];         
283   uint8_t bufferUsed;        
284   uint8_t rxAlign;           
285   uint8_t txLastBits;        
286   uint8_t *responseBuffer;
287   uint8_t responseLength; 
288   if (validBits > 80)
289   {
290     return STATUS_INVALID;
291   }
292   PCD_ClrRegisterBits(CollReg, 0x80);
293   uidComplete = false;
294   while ( ! uidComplete)
295   {
296     switch (cascadeLevel)
297     {
298       case 1:
299         buffer[0] = PICC_CMD_SEL_CL1;
300         uidIndex = 0;
301         useCascadeTag = validBits && (uid->size > 4); 
302         break;
303       case 2:
304         buffer[0] = PICC_CMD_SEL_CL2;
305         uidIndex = 3;
306         useCascadeTag = validBits && (uid->size > 7); 
307         break;
308       case 3:
309         buffer[0] = PICC_CMD_SEL_CL3;
310         uidIndex = 6;
311         useCascadeTag = false;            
312         break;
313       default:
314         return STATUS_INTERNAL_ERROR;
315     }
316     if(validBits > (8 * uidIndex))
317     {
318       currentLevelKnownBits = validBits - (8 * uidIndex);
319     }
320     else
321     {
322       currentLevelKnownBits = 0;
323     }
324     index = 2; // destination index in buffer[]
325     if (useCascadeTag)
326     {
327       buffer[index++] = PICC_CMD_CT;
328     }
329     uint8_t bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
330     if (bytesToCopy)
331     { 
332       uint8_t maxBytes = useCascadeTag ? 3 : 4;
333       if (bytesToCopy > maxBytes)
334       {
335         bytesToCopy = maxBytes;
336       }
337       for (count = 0; count < bytesToCopy; count++)
338       {
339         buffer[index++] = uid->uidByte[uidIndex + count];
340       }
341     }  
342     if (useCascadeTag)
343     {
344       currentLevelKnownBits += 8;
345     }
346     selectDone = false;
347     while ( ! selectDone)
348     {   
349       if (currentLevelKnownBits >= 32)
350       {     
351         buffer[1] = 0x70;  
352         buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; 
353         result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
354         if (result != STATUS_OK)
355         {
356           return result;
357         }
358         txLastBits      = 0; 
359         bufferUsed      = 9; 
360         responseBuffer  = &buffer[6];
361         responseLength  = 3;
362       }
363       else
364       { 
365         txLastBits     = currentLevelKnownBits % 8;
366         count          = currentLevelKnownBits / 8;  
367         index          = 2 + count;                  
368         buffer[1]      = (index << 4) + txLastBits;  
369         bufferUsed     = index + (txLastBits ? 1 : 0);   
370         responseBuffer = &buffer[index];
371         responseLength = sizeof(buffer) - index;
372       } 
373       rxAlign = txLastBits;                     
374       PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);    
375       result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
376       if (result == STATUS_COLLISION)
377       { 
378         result = PCD_ReadRegister(CollReg);     
379         if (result & 0x20)
380         { 
381           return STATUS_COLLISION; 
382         }
383         uint8_t collisionPos = result & 0x1F; 
384         if (collisionPos == 0)
385         {
386           collisionPos = 32;
387         }
388         if (collisionPos <= currentLevelKnownBits)
389         { 
390           return STATUS_INTERNAL_ERROR;
391         }
392         currentLevelKnownBits = collisionPos;
393         count          = (currentLevelKnownBits - 1) % 8; 
394         index          = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); 
395         buffer[index] |= (1 << count);
396       }
397       else if (result != STATUS_OK)
398       {
399         return result;
400       }
401       else
402       { 
403         if (currentLevelKnownBits >= 32)
404         { 
405           selectDone = true;   
406         }
407         else
408         {  
409           currentLevelKnownBits = 32;    
410         }
411       }
412     } 
413     index       = (buffer[2] == PICC_CMD_CT) ? 3 : 2; 
414     bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
415     for (count = 0; count < bytesToCopy; count++)
416     {
417       uid->uidByte[uidIndex + count] = buffer[index++];
418     } 
419     if (responseLength != 3 || txLastBits != 0)
420     {   
421       return STATUS_ERROR;
422     }
423     result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
424     if (result != STATUS_OK)
425     {
426       return result;
427     }
428     if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2]))

429     {
430       return STATUS_CRC_WRONG;
431     }
432     if (responseBuffer[0] & 0x04)
433     { 
434       cascadeLevel++;
435     }
436     else
437     {
438       uidComplete = true;
439       uid->sak = responseBuffer[0];
440     }
441   } 
442   uid->size = 3 * cascadeLevel + 1;
443   return STATUS_OK;
444 } 
445 bool customMFRC522::PICC_IsNewCardPresent(void)
446 {
447   uint8_t bufferATQA[2];
448   uint8_t bufferSize = sizeof(bufferATQA);
449   uint8_t result = PICC_RequestA(bufferATQA, &bufferSize);
450   return ((result == STATUS_OK) || (result == STATUS_COLLISION));
451 } 
452 bool customMFRC522::PICC_ReadCardSerial(void)
453 {
454   uint8_t result = PICC_Select(&uid);
455   return (result == STATUS_OK);
456 } // End PICC_ReadCardSerial(
